# DOMAIN=example.com docker stack deploy -c element.yml element
# docker cp $(docker create --rm ghcr.io/etkecc/synapse-admin):/app/ .
# echo '{ "restrictBaseUrl": "https://element.localhost" }' > /app/config.json # On synapse-admin
# register_new_matrix_user -c /data/homeserver.yaml https://element.localhost # Create an admin user
# UPDATE users SET admin = 1 WHERE name = '@username:yourserver.com'; # Set admin role
# https://matrix.org/federationtester # To check config

services:
  web:
    image: vectorim/element-web:${VERSION:-v1.11.91}
    user: root
    command:
      - /bin/sh
      - -c
      - |
        mkdir /app/.well-known/matrix/
        echo '{"m.server": "'$$DOMAIN':443"}' > /app/.well-known/matrix/server
        echo '{"m.homeserver":{"base_url":"'$$SCHEME'://'$$DOMAIN'"},"m.identity_server":{"base_url":"https://vector.im"}}' > /app/.well-known/matrix/client
        sed -i -e 's/"breadcrumbs": true/"breadcrumbs": true,\n        "language": "'$$LANGUAGE'"/g' /app/config.json
        sed -i -e 's#https://matrix-client.matrix.org#'$$SCHEME'://'$$DOMAIN'#g' /app/config.json
        sed -i -e 's/matrix.org/'$$DOMAIN'/g' /app/config.json
        nginx -g 'daemon off;'
    environment:
      - SCHEME=${SCHEME:-https}
      - LANGUAGE=${LANGUAGE:-fr_FR}
      - DOMAIN=${DOMAIN:-element.localhost}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.element-${NUMBER:-1}.rule=Host(`${DOMAIN:-element.localhost}`)
        - traefik.http.routers.element-${NUMBER:-1}.entrypoints=${SCHEME:-https}
        - traefik.http.routers.element-${NUMBER:-1}.service=element-${NUMBER:-1}
        - traefik.http.routers.element-${NUMBER:-1}.tls.certresolver=letsencrypt
        - traefik.http.services.element-${NUMBER:-1}.loadbalancer.server.port=80
    networks:
      - traefik
      - internal

  synapse:
    image: ghcr.io/element-hq/synapse:${SYNAPSE_VERSION:-v1.123.0}
    volumes:
      - ${VOLUME_PATH}synapse:/data
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.element-synapse-${NUMBER:-1}.rule=Host(`${DOMAIN:-element.localhost}`) && (PathPrefix(`/_matrix`) || PathPrefix(`/_synapse`))
        - traefik.http.routers.element-synapse-${NUMBER:-1}.entrypoints=${SCHEME:-https}
        - traefik.http.routers.element-synapse-${NUMBER:-1}.service=element-synapse-${NUMBER:-1}
        - traefik.http.routers.element-synapse-${NUMBER:-1}.tls.certresolver=letsencrypt
        - traefik.http.services.element-synapse-${NUMBER:-1}.loadbalancer.server.port=8008
    networks:
      - traefik
      - internal

  synapse-init:
    image: ghcr.io/element-hq/synapse:${SYNAPSE_VERSION:-v1.123.0}
    entrypoint: /bin/sh
    command:
      - -c
      - |
        /start.py generate
        sed -i -e '/^[^#]*log_config:/s/^/#/' /data/homeserver.yaml
        if ! grep -q 'enable_registration' /data/homeserver.yaml; then
          sed -i "/registration_shared_secret/a enable_registration: $$ENABLE_REGISTRATION" /data/homeserver.yaml
        fi
        if ! grep -q 'enable_registration_without_verification' /data/homeserver.yaml; then
          sed -i "/registration_shared_secret/a enable_registration_without_verification: $$DISABLE_VERIFICATION" /data/homeserver.yaml
        fi
        if [ -n "$$AUTO_JOIN_ROOM" ] && ! grep -q 'auto_join_rooms' /data/homeserver.yaml; then
          echo -e "\nauto_join_rooms:\n  - \"$$AUTO_JOIN_ROOM\"" >> /data/homeserver.yaml
        fi
    volumes:
      - ${VOLUME_PATH}synapse:/data
    environment:
      - AUTO_JOIN_ROOM=${AUTO_JOIN_ROOM}
      - ENABLE_REGISTRATION=${ENABLE_REGISTRATION:-true}
      - DISABLE_VERIFICATION=${DISABLE_VERIFICATION:-true}
      - SYNAPSE_SERVER_NAME=${DOMAIN:-element.localhost}
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_NO_TLS=yes
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal

  synapse-admin:
    image: ghcr.io/etkecc/synapse-admin:${SYNAPSE_ADMIN_VERSION:-latest}
    volumes:
      - ${VOLUME_PATH}app:/app
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.element-synapse-admin-${NUMBER:-1}.rule=Host(`${DOMAIN:-element.localhost}`) && PathPrefix(`/admin`)
        - traefik.http.routers.element-synapse-admin-${NUMBER:-1}.entrypoints=${SCHEME:-https}
        - traefik.http.routers.element-synapse-admin-${NUMBER:-1}.service=element-synapse-admin-${NUMBER:-1}
        - traefik.http.routers.element-synapse-admin-${NUMBER:-1}.tls.certresolver=letsencrypt
        - traefik.http.routers.element-synapse-admin-${NUMBER:-1}.middlewares=element-synapse-admin-${NUMBER:-1},element-synapse-admin_path-${NUMBER:-1}
        - traefik.http.services.element-synapse-admin-${NUMBER:-1}.loadbalancer.server.port=80
        - traefik.http.middlewares.element-synapse-admin-${NUMBER:-1}.redirectregex.regex=^(.*)/admin/?
        - traefik.http.middlewares.element-synapse-admin-${NUMBER:-1}.redirectregex.replacement=$${1}/admin/
        - traefik.http.middlewares.element-synapse-admin_path-${NUMBER:-1}.stripprefix.prefixes=/admin
    networks:
      - traefik
      - internal

volumes:
  synapse:
  app:

networks:
  internal:
    driver: overlay
    attachable: true
  traefik:
    external: true
    name: traefik-net
